# -*- coding: utf-8 -*-
"""cheat_train Yolo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VFKET1sp0JuAG7SjPTFbpER1rs7hLG-r
"""

!pip install roboflow ultralytics

!pip install roboflow

from roboflow import Roboflow
rf = Roboflow(api_key="FJBfSQHjkO7GNZGVQt2I")
project = rf.workspace("ajay-7j38s").project("cheating-bmaay")
version = project.version(8)
dataset = version.download("yolov11")

from google.colab import files

# Upload file from your local system
uploaded = files.upload()

from ultralytics import YOLO

# this will auto-download yolov11s pretrained weights
model = YOLO("yolo11s.pt")


from ultralytics import YOLO

# Auto-downloads pretrained weights (use yolov8s.pt unless you have yolov11s.pt uploaded)
model = YOLO("yolo11s (1).pt")   # replace with "yolov11s.pt" if you have uploaded it

# Train
results = model.train(
    data=f"{dataset.location}/data.yaml",  # path to Roboflow dataset YAML
    epochs=150,          # more epochs = better accuracy (start with 200)
    imgsz=896,           # larger image size for more accurate boxes
    batch=16,            # lower to 8 if OOM
    workers=4,           # dataloader workers
    device=0,            # use GPU
    optimizer="SGD",     # better generalization than AdamW
    lr0=0.01,            # initial learning rate
    patience=40,         # early stopping patience
    name="cheat_yolo_best",  # run name
    augment=True,        # enable augmentation
    mosaic=True,         # strong augmentation
    mixup=True,          # mixup augmentation
    save=True,           # save checkpoints
    verbose=True
)

# Cell 1: display the training plot and print the validation numbers already logged
from IPython.display import Image, display
import os

run_dir = "/content/runs/detect/cheat_yolo_best"
res_png = os.path.join(run_dir, "results.png")
if os.path.exists(res_png):
    display(Image(res_png))
else:
    print("results.png not found in", run_dir)

# print summary path
print("Results saved to", run_dir)
print("Best checkpoint:", os.path.join(run_dir, "weights", "best.pt"))

# Download best.pt to your local machine
from google.colab import files

files.download("/content/runs/detect/cheat_yolo_best/weights/best.pt")

!zip -r best_model.zip /content/runs/detect/cheat_yolo_best/weights/best.pt

# RUN ON COLAB: evaluate best.pt on test set, save CSV, save preds, show worst IoU images
# Adjust RUN_DIR if your run path differs.
from ultralytics import YOLO
import os, glob, csv, shutil, numpy as np
from pathlib import Path
from IPython.display import display, Image

# === CONFIG ===
RUN_DIR = "/content/runs/detect/cheat_yolo_best"   # CHANGE if different
CKPT = os.path.join(RUN_DIR, "weights", "best.pt")
DATA_YAML = None   # if you have dataset.location use f"{dataset.location}/data.yaml" OR put path here
# Attempt to auto-detect dataset yaml from earlier `dataset` object (Roboflow) if present
if 'dataset' in globals() and hasattr(dataset, "location"):
    DATA_YAML = f"{dataset.location}/data.yaml"
if DATA_YAML is None:
    DATA_YAML = "data.yaml"   # change manually if needed

# test images dir auto-detect
candidates = []
if 'dataset' in globals() and hasattr(dataset, "location"):
    candidates += [os.path.join(dataset.location, "test", "images"),
                   os.path.join(dataset.location, "valid", "images"),
                   os.path.join(dataset.location, "test_images"),
                   os.path.join(dataset.location, "test")]
candidates += ["data/test/images","data/test","data/val/images","data/val","test/images","test","val/images","val"]
TEST_IMAGES = next((p for p in candidates if p and os.path.exists(p)), None)
if TEST_IMAGES is None:
    raise FileNotFoundError("Test images folder not found. Set TEST_IMAGES path in the cell before running.")

print("Using checkpoint:", CKPT)
print("Using data.yaml:", DATA_YAML)
print("Test images folder:", TEST_IMAGES)

# === Load model ===
model = YOLO(CKPT)

# === 1) Numeric validation on test split (prints metrics) ===
try:
    print("\n--- Running validation on test split (this may take a while) ---")
    metrics_test = model.val(data=DATA_YAML, split="test", imgsz=896)  # use same or larger imgsz
    print("\n=== Test metrics ===")
    print(metrics_test)   # contains mAP@50, mAP@50-95, per-class AP, precision, recall
except Exception as e:
    print("Validation on test split failed:", e)
    metrics_test = None

# === 2) Save predictions (images) and collect detection rows ===
OUT_BASE = "/content/test_evals"
OUT_NAME = "cheat_yolo_test_run"
out_project = os.path.join(OUT_BASE, OUT_NAME)
os.makedirs(out_project, exist_ok=True)

print("\n--- Running predictions and saving images (+ CSV) ---")
res = model.predict(source=TEST_IMAGES, imgsz=896, conf=0.25, iou=0.45, save=True,
                    project=OUT_BASE, name=OUT_NAME, exist_ok=True)
pred_images_dir = os.path.join(out_project, "images")
print("Predicted images saved to:", pred_images_dir)

# Build CSV of detections
csv_path = os.path.join(out_project, "detections.csv")
rows = []
names = model.model.names if hasattr(model.model, "names") else {}
for r in res:
    img_path = getattr(r, "path", None) or getattr(r, "orig_path", None)
    img_name = os.path.basename(img_path) if img_path else "unknown.jpg"
    if r.boxes is None or len(r.boxes) == 0:
        continue
    xyxy = r.boxes.xyxy.cpu().numpy()
    confs = r.boxes.conf.cpu().numpy()
    cls_ids = r.boxes.cls.cpu().numpy().astype(int)
    for i, b in enumerate(xyxy):
        x1,y1,x2,y2 = [float(x) for x in b[:4]]
        conf = float(confs[i])
        cls_id = int(cls_ids[i])
        cls_name = names.get(cls_id, str(cls_id)) if isinstance(names, dict) else (names[cls_id] if names else str(cls_id))
        rows.append([img_name, cls_id, cls_name, conf, x1, y1, x2, y2])
# write CSV
with open(csv_path, "w", newline="") as f:
    writer = csv.writer(f)
    writer.writerow(["image","class_id","class_name","conf","x1","y1","x2","y2"])
    writer.writerows(rows)
print("Wrote detections CSV:", csv_path, " Total detections:", len(rows))

# === 3) Per-image avg IoU vs GT (if YOLO-format labels available) ===
print("\n--- Computing per-image avg IoU (requires YOLO-format labels in parallel folder) ---")
# find labels folder that matches TEST_IMAGES structure
labels_candidates = []
if 'dataset' in globals() and hasattr(dataset, "location"):
    labels_candidates += [os.path.join(dataset.location, "test", "labels"), os.path.join(dataset.location, "valid", "labels")]
labels_candidates += ["data/test/labels","data/val/labels","test/labels","val/labels","labels"]
labels_dir = next((p for p in labels_candidates if p and os.path.exists(p)), None)
if labels_dir is None:
    print("Labels folder NOT found; skipping IoU computation. If you want IoU, place YOLO-format .txt labels and re-run.")
    bad_images = []
else:
    import cv2, math
    def yolo_to_xyxy(xc, yc, w, h, W, H):
        x1 = (xc - w/2) * W
        y1 = (yc - h/2) * H
        x2 = (xc + w/2) * W
        y2 = (yc + h/2) * H
        return [x1,y1,x2,y2]
    def iou(boxA, boxB):
        xA = max(boxA[0], boxB[0]); yA = max(boxA[1], boxB[1])
        xB = min(boxA[2], boxB[2]); yB = min(boxA[3], boxB[3])
        interW = max(0, xB - xA); interH = max(0, yB - yA)
        inter = interW * interH
        boxAArea = max(0, boxA[2]-boxA[0]) * max(0, boxA[3]-boxA[1])
        boxBArea = max(0, boxB[2]-boxB[0]) * max(0, boxB[3]-boxB[1])
        denom = boxAArea + boxBArea - inter
        return inter/denom if denom>0 else 0.0
    # load CSV into dict by image for preds
    preds_by_image = {}
    for r in rows:
        preds_by_image.setdefault(r[0], []).append(r)  # row format image, class_id, class_name, conf, x1,y1,x2,y2
    bad_images = []
    for img_path in sorted(glob.glob(os.path.join(TEST_IMAGES, "*.*"))):
        img_name = os.path.basename(img_path)
        lbl_path = os.path.join(labels_dir, Path(img_name).with_suffix('.txt').name)
        if not os.path.exists(lbl_path):
            continue
        img = cv2.imread(img_path); H,W = img.shape[:2]
        gts = []
        with open(lbl_path) as f:
            for line in f:
                parts = line.strip().split()
                if len(parts) < 5: continue
                cls, xc, yc, w, h = parts[:5]
                gts.append((int(float(cls)), yolo_to_xyxy(float(xc),float(yc),float(w),float(h),W,H)))
        preds = preds_by_image.get(img_name, [])
        iou_vals = []
        for gt_cls, gt_box in gts:
            # match by same class; choose best pred IoU
            same = [p for p in preds if int(p[1])==gt_cls]
            if not same:
                iou_vals.append(0.0); continue
            best_iou = 0.0
            for p in same:
                pred_box = [p[4],p[5],p[6],p[7]]
                cur = iou(gt_box, pred_box)
                if cur>best_iou: best_iou=cur
            iou_vals.append(best_iou)
        avg_iou = sum(iou_vals)/len(iou_vals) if iou_vals else 0.0
        if avg_iou < 0.5:
            bad_images.append((img_name, avg_iou))
    bad_images = sorted(bad_images, key=lambda x: x[1])
    print(f"Found {len(bad_images)} images with avg IoU < 0.5. Showing worst 10:")
    for im, sc in bad_images[:10]:
        print(im, "avg IoU:", round(sc,3))

# === 4) Copy results to Drive for download (if Drive mounted) ===
DRIVE_MOUNT = "/content/drive/MyDrive"
if os.path.exists(DRIVE_MOUNT):
    drive_out = os.path.join(DRIVE_MOUNT, "yolo_test_results", OUT_NAME)
    shutil.rmtree(drive_out, ignore_errors=True)
    shutil.copytree(out_project, drive_out)
    # also copy CSV and best.pt
    shutil.copy(CKPT, os.path.join(drive_out, "best.pt"))
    print("\nAll outputs copied to your Drive at:", drive_out)
else:
    print("\nDrive not mounted. Results are in:", out_project)
    print("To back them up, mount Drive (from Colab) and re-run copy step.")

# === 5) Display a few worst images (if labels found and bad images exist) ===
if bad_images:
    print("\nDisplaying worst 6 images (avg IoU lowest):")
    worst = [x[0] for x in bad_images[:6]]
    for name in worst:
        img_path = os.path.join(TEST_IMAGES, name)
        pred_path = os.path.join(pred_images_dir, name)
        if os.path.exists(pred_path):
            display(Image(pred_path))
        elif os.path.exists(img_path):
            display(Image(img_path))

# === Print final summary ===
print("\n=== SUMMARY ===")
if metrics_test is not None:
    print("Test metrics (dict):")
    print(metrics_test)
print("Predictions saved to:", pred_images_dir)
print("Detections CSV:", csv_path)
if bad_images:
    print("Worst images (avg IoU < 0.5):", bad_images[:10])
else:
    print("No IoU-bad images found or labels not available.")

!yolo detect val model=/content/runs/detect/cheat_yolo_best/weights/best.pt data=cheating--8/data.yaml split=test

from ultralytics import YOLO

# load your trained model
model = YOLO("/content/runs/detect/cheat_yolo_best/weights/best.pt")

# evaluate on test set
metrics_test = model.val(data="cheating--8/data.yaml", split="test", imgsz=896)
print(metrics_test)  # prints precision, recall, mAP50, mAP50-95 etc.

from ultralytics import YOLO
import os, glob
from IPython.display import display, Image

ckpt = "/content/runs/detect/cheat_yolo_best/weights/best.pt"
model = YOLO(ckpt)

out_project = "/content/test_preds"
out_name = "cheat_best_test"
res = model.predict(
    source="/content/cheating--8/test/images",  # your test images folder
    imgsz=896,
    conf=0.25,
    iou=0.45,
    save=True,
    project=out_project,
    name=out_name,
    exist_ok=True
)
pred_dir = os.path.join(out_project, out_name, "images")
print("Saved predictions to:", pred_dir)

# show first 6 predicted images inline
files = sorted(glob.glob(pred_dir + "/*.*"))[:6]
for f in files:
    display(Image(f))



from ultralytics import YOLO
import glob, os
from IPython.display import Image, display

# Load trained model
model = YOLO("/content/runs/detect/cheat_yolo_best/weights/best.pt")

# Run predictions on test set and save images
results = model.predict(
    source="/content/cheating--8/test/images",  # test images folder
    imgsz=896,
    conf=0.25,
    save=True,
    project="runs/predictions",
    name="test_preds",
    exist_ok=True
)

# Show a few saved prediction images
pred_dir = "runs/predictions/test_preds"
files = sorted(glob.glob(os.path.join(pred_dir, "images", "*.*")))[:6]

print(f"Showing {len(files)} prediction images from {pred_dir}/images")
for f in files:
    display(Image(f))



from ultralytics import YOLO

# Load your trained model (best.pt)
model = YOLO("/content/runs/detect/cheat_yolo_best/weights/best.pt")

# Run validation on the validation set
metrics = model.val(data="cheating--8/data.yaml", split="val", imgsz=896)

# Print full metrics dictionary
print(metrics)

# If you want specific values:
print("\n--- Validation Metrics ---")
print("Precision:", metrics.results_dict['metrics/precision(B)'])
print("Recall:", metrics.results_dict['metrics/recall(B)'])
print("mAP@50:", metrics.results_dict['metrics/mAP50(B)'])
print("mAP@50-95:", metrics.results_dict['metrics/mAP50-95(B)'])











